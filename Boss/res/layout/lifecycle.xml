<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical" >

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/activitylife" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="1、entire lifetime （整个生命周期）一个Activity整个生命周期，存在于onCreate()方法和onDestroy()调用之间。你的Activity应该在onCreate()方法里执行设置“全局”状态(如定义布局)。并在onDestroy()方法里释放所有剩余资源。例如，如果你的活动有一个线程在后台运行下载网络数据，它可以在onCreate()中创建该线程，然后在onDestroy()中停止线程。
2、visible lifetime（可见生命周期）一个Activity可见生命周期，存在于onStart()和onStop()调用之间。在此期间，用户可以看到屏幕上的activity并与之交互。当一个其他的Activity启动，并且这个Activity完全不可见的时候，onStop()方法就会被调用。在这两个方法，你可以保持该Activity需要展示给用户的资源。例如，您可以在onStart()方法里注册一个BroadcastReceiver来监控你的UI的变化，并在onStop()方法里注销它。在整个生命周期的活动中，系统可能会调用onStart()和onStop()多次，因为活动之间交替进行隐藏或显示给用户。
3、 foreground lifetime（前台生命周期）一个Activity前台生命周期，存在于onResume()和onPause()调用之间。在这段时间里，这个Activity在其他所有Activity的前面，拥有用户输入焦点。一个Activity可以经常在前台状态发生转换—比如，当设备休眠或者弹出了个对话框。因为经常会发生转换，所以在这两个方法之间的代码应该是轻量级的，防止导致其他转换变慢使得用户需要等待。
" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="一个Activity本质上只有三种状态：Resumed（运行）、Paused（暂停）、Stopped（停止），因为从Activity被创建之后，它只可能在这三种状态保持长久的停留，其他的回调方法结束后的状态都只能称之为过渡状态。比如进入到onStart方法后，执行完该方法，会立即进入到OnResume方法。（这里所说的状态都是指对应的某个方法返回之后）即使一个Activity进入到Paused或者Stopped方法，它仍然是存在的，被保存在任务返回堆栈中。它仍然保持着自身的所有实例和状态，所以根本不用担心它在返回到onResume方法时，实例会变为null，或者控件的事件监听不了（我以前就担心过这个问题）。唯一需要考虑的就是，系统在内存不足的情况下，杀死在Paused或者Stopped状态下的Activity。
当一个Activity在Resumed状态下，它是不会因内存不够而被系统直接杀死（在极端的情况下也有可能被杀死，但是一般不会考虑这种情况）。只有进入Paused或者Stopped状态才会，而且可能根本就不会去调用onStop()和onDestory()方法，所以onPause()方法是我们最大程度上保证Activity在销毁之前能够执行到的方法。因此，如果你的某个Activity需要保存某些数据到数据库，您应该在onPause()里编写持久化数据的代码。但要注意，你应该选择哪些信息必须保留在onPause()，因为这个方法任何阻塞程序都会阻止过渡到下一个Activity，这样给用户体验就感觉十分缓慢。" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="一个Activity本质上只有三种状态：Resumed（运行）、Paused（暂停）、Stopped（停止），因为从Activity被创建之后，它只可能在这三种状态保持长久的停留，其他的回调方法结束后的状态都只能称之为过渡状态。比如进入到onStart方法后，执行完该方法，会立即进入到OnResume方法。（这里所说的状态都是指对应的某个方法返回之后）即使一个Activity进入到Paused或者Stopped方法，它仍然是存在的，被保存在任务返回堆栈中。它仍然保持着自身的所有实例和状态，所以根本不用担心它在返回到onResume方法时，实例会变为null，或者控件的事件监听不了（我以前就担心过这个问题）。唯一需要考虑的就是，系统在内存不足的情况下，杀死在Paused或者Stopped状态下的Activity。
当一个Activity在Resumed状态下，它是不会因内存不够而被系统直接杀死（在极端的情况下也有可能被杀死，但是一般不会考虑这种情况）。只有进入Paused或者Stopped状态才会，而且可能根本就不会去调用onStop()和onDestory()方法，所以onPause()方法是我们最大程度上保证Activity在销毁之前能够执行到的方法。因此，如果你的某个Activity需要保存某些数据到数据库，您应该在onPause()里编写持久化数据的代码。但要注意，你应该选择哪些信息必须保留在onPause()，因为这个方法任何阻塞程序都会阻止过渡到下一个Activity，这样给用户体验就感觉十分缓慢。" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="一 单个生命周期方法:\n
            1.当进入这个Activity时:oncreate-onstart-onresume.\n
             2.当点击按钮，调用finish()方法后:onpause-onstop-ondestory.\n
             3.如果我们将finish()调用直接放在onCreate方法里:oncreate-ondestory.\n
             4.如果我们将finish()调用直接放在onStart方法里:oncreate-onstart-onstop-ondestory.\n
             5.如果我们将finish()调用直接放在onResume方法里:oncreate-onstart-onresume-onpause-onstop-ondestory.\n" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="把Activity的生命周期表示为一种对称的结构" />

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:src="@drawable/life2" />

        <Button
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="二 Activity之间切换时生命周期的变化\n
            1.启动一个全屏activity:
            06-07 23:47:21.796: I/System.out(1508): LifecycleOtherActivity onPause
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onRestart
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onStart
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onResume
06-07 23:47:22.295: I/System.out(1508): LifecycleOtherActivity onStop
06-07 23:47:22.295: I/System.out(1508): LifecycleOtherActivity onDestroy
 返回activity:
            06-07 23:47:21.796: I/System.out(1508): LifecycleOtherActivity onPause
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onRestart
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onStart
06-07 23:47:21.815: I/System.out(1508): LifecycleActivity onResume
06-07 23:47:22.295: I/System.out(1508): LifecycleOtherActivity onStop
06-07 23:47:22.295: I/System.out(1508): LifecycleOtherActivity onDestroy
2、启动对话框样式的Activity:
06-08 00:01:04.245: I/System.out(1508): LifecycleActivity onPause
06-08 00:01:04.325: I/System.out(1508): LifecycleDialogActivity onCreate
06-08 00:01:04.325: I/System.out(1508): LifecycleDialogActivity onStart
06-08 00:01:04.325: I/System.out(1508): LifecycleDialogActivity onResum
返回
06-08 00:02:05.535: I/System.out(1508): LifecycleDialogActivity onPause
06-08 00:02:05.625: I/System.out(1508): LifecycleActivity onResume
06-08 00:02:06.165: I/System.out(1508): LifecycleDialogActivity onStop
06-08 00:02:06.165: I/System.out(1508): LifecycleDialogActivity onDestroy
3、启动一个普通的对话框,生命周期无任何变化
4、LifecycleActivity中按钮的点击事件改成如下，并重写finish和startActivity，
在里面也增加打印输出:finish();startActivity(new Intent(LifecycleActivity.this, LifecycleOtherActivity.class));
System.out.println(ABCDEFG);  
06-08 22:07:26.599: I/System.out(560): LifecycleActivity finish
06-08 22:07:26.619: I/System.out(560): LifecycleActivity startActivity
06-08 22:07:26.619: I/System.out(560): ABCDEFG
06-08 22:07:26.619: I/System.out(560): LifecycleActivity onPause
06-08 22:07:26.671: I/System.out(560): LifecycleOtherActivity onCreate
06-08 22:07:26.671: I/System.out(560): LifecycleOtherActivity onStart
06-08 22:07:26.671: I/System.out(560): LifecycleOtherActivity onResume
06-08 22:07:27.510: I/System.out(560): LifecycleActivity onStop
06-08 22:07:27.510: I/System.out(560): LifecycleActivity onDestroy
这里面涉及到Activity的管理问题，没有太多的研究，不太清楚，不过大概可以理解为finish和startActivity都是一个异步阻塞的过程，它必须要等到他们所在的那个方法执行完毕后，
接着去finish或者start一个Activity，并且startActivity先于finish解除阻塞。\n\n
四、回调方法应该干些甚么
回调方法的作用，就是通知我们Activity生命周期的改变，然后我们可以处理这种改变，以便程序不会崩溃或者数据丢失等等，也就是拥有更好的用户体检，那么这么多回调方法里到底应该怎么做呢？
这个问题不好总结，因为不同的应用、不同的Activity所干的事都不一样，有时候我们甚至只需要实现一个onCreate就行了。所以下面所说的，看看即可，不一定符合所有的情况。
1、onCreate
最重要是在里面调用setContentView，还可以在里面初始化各控件、设置监听、并初始化一些全局的变量。
因为在Activity的一次生命周期中，onCreate方法只会执行一次。在Paused和Stopped状态下恢复或重启的下，这些控件、监听和全局变量也不会丢失。即便是内存不足，被回收了，
再次Recreate的话，又是一次新的生命周期的开始，又会执行onCreate方法。
还可以在onCreate执行数据操作，比如从Cursor中检索数据等等，
但是如果你每次进入这个Activity都可能需要更新数据，那么最好放在onStart里面。（这个需要根据实际情况来确定）
2、onDestory
确定某些资源是否没有被释放，做一些最终的清理工作，比如在这个Activity的onCreate中开启的某个线程，
那么就要在onDestory中确定它是否结束了，如果没有，就结束它。
3、onStart和onRestart、onStop
Activity进入到Stopped状态之后，它极有可能被系统所回收，在某些极端情况下，系统可能是直接杀死应用程序的进程，
而不是调用onDestory方法，所以我们需要在onStop方法中尽可能的释放那些用户暂时不需要使用的资源，防止内存泄露。
尽管onPause在onStop之前执行，但是onPause只适合做一些轻量级的操作，
更多的耗时耗资源的操作还是要放在onStop里面，比如说对数据保存，需要用到的数据库操作。
因为从Stopped状态重启之后， onStart和onRestart方法都会被执行，
所以我们要判断哪些操作分别要放在哪个方法里面 。
因为可能在onStop方法里面释放了一些资源，那么我们必须要重启他们，
这个时候这些重启的操作放在onStart方法里面就比较好（因为onCreate之后也需要开启这些资源）。那些因为Stopped之后引发的需要单独操作的代码，就可以放在onRestart里面。
4、onResume和onPause
onPause和onResume中做的操作，其实意义上和onStart和inStop差不多，只不过是要更轻量级的，因为onPause不能阻塞转变到下一个Activity。
比如：停止动画、取消broadcast receivers。当然相应的需要在onResume中重启或初始化等等。
有时候也需要在onPause判断用户是调用finish结束这个Activity，还是暂时离开，以便区分处理。这时候可以调用isFinishing()方法来判断。如果是用户finish这个Activity，那么返回为true，如果只是暂时离开或者被系统回收的话，就返回false。" />
    </LinearLayout>

</ScrollView>